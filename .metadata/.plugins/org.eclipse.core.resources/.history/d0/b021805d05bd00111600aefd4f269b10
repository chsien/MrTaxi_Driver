package com.MrTaxi.Driver;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.media.CamcorderProfile;
import android.media.MediaRecorder;
import android.net.LocalServerSocket;
import android.net.LocalSocket;
import android.net.LocalSocketAddress;
import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ToggleButton;

import com.MrTaxi.core.Polyline;
import com.MrTaxi.core.cameraHandler;
import com.MrTaxi.net.core.asycTask_todo;
import com.MrTaxi.net.implement.RTPshackHand;
import com.MrTaxi.net.implement.RTPthread;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.MyLocationOverlay;
import com.google.android.maps.Overlay;

public class VideoRecordingActivity extends MapActivity implements Callback{
    	
	
	
	
	private MapView mapView;
	private MapController mapController;
	private MyLocationOverlay mylayer;
	private String address;
	private Boolean hasaddress=false;
	
	
	
	
	
	private ToggleButton toggleButton_upload;
	private SurfaceHolder surfaceHolder;
	private SurfaceView surfaceView;
	private boolean surfaceView_state;	
	
	private cameraHandler camera_handler;
	
	private MediaRecorder mediaRecorder;
	
	private RTPthread RTPthreadHandler;
	private RTPshackHand RTPshackHandHandler;
	
	private LocalSocket receiver, sender;  
	private LocalServerSocket lss;
	
	private Boolean isRecording = false;
	
	private Button openmap;
	private Button state;
    
	
	Dialog dialog_catch;
	android.content.DialogInterface.OnClickListener dialogOnClickListener_catch = new android.content.DialogInterface.OnClickListener() {
		public void onClick(DialogInterface dialog, int response) {
			switch(response)
			{
				case Dialog.BUTTON_POSITIVE:
				{
					state.setText("結束載客");	
					state.setOnClickListener(new Button.OnClickListener(){
			        	public void onClick(View v) {
			        		dialog_finish.show();    		
			        	}
			        });
					break;
				}
			}
		}
	};
	
	Dialog dialog_finish;
	android.content.DialogInterface.OnClickListener dialogOnClickListener_finish = new android.content.DialogInterface.OnClickListener() {
		public void onClick(DialogInterface dialog, int response) {
			switch(response)
			{
				case Dialog.BUTTON_POSITIVE:
				{
					state.setText("乘客上車");	
					Intent it=new Intent();
	            	it.setClass(VideoRecordingActivity.this, sumActivity.class);
	            	startActivity(it); 
	            	VideoRecordingActivity.this.finish();
					break;
				}
			}
		}
	};
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	
    	// full screen
    	getWindow().setFlags(
    	    WindowManager.LayoutParams.FLAG_FULLSCREEN,
    	    WindowManager.LayoutParams.FLAG_FULLSCREEN);
    	
    	// keep screen on
    	getWindow().setFlags(
    			WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, 
    			WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    	
        super.onCreate(savedInstanceState);
        setContentView(R.layout.tab2);
        
    	surfaceView = (SurfaceView) findViewById(R.id.surfaceView_camera);
        surfaceHolder = surfaceView.getHolder();
        surfaceHolder.addCallback(this);
        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS); 
        
        openmap=(Button)findViewById(R.id.openmap);
        openmap.setOnClickListener(new Button.OnClickListener(){
        	public void onClick(View v) {

        		mapView.setVisibility(View.VISIBLE);
        		if(hasaddress) direction();
        		
        	}
        });
        
        
        
        dialog_catch = new AlertDialog.Builder(this)
        .setTitle("乘客已經上車?")
        .setPositiveButton("確定", dialogOnClickListener_catch)
        .setNegativeButton("取消", dialogOnClickListener_catch).create(); 
        
        dialog_finish = new AlertDialog.Builder(this)
        .setTitle("結束載客?")
        .setPositiveButton("確定", dialogOnClickListener_finish)
        .setNegativeButton("取消", dialogOnClickListener_finish).create(); 
        
        state=(Button)findViewById(R.id.state);
        state.setOnClickListener(new Button.OnClickListener(){
        	public void onClick(View v) {
        		dialog_catch.show();    		
        	}
        });
        
        toggleButton_upload = (ToggleButton)findViewById(R.id.toggleButton_upload);
        toggleButton_upload.setOnCheckedChangeListener(new OnCheckedChangeListener()
        {

			public void onCheckedChanged(CompoundButton arg0, boolean arg1) {
				
				
                if ( arg1 )
                {
                	if(isRecording == true)
                		return;
                	
                	toggleButton_upload.setChecked(false);
                	
                	
                	RTPshackHandHandler.actionOn( VideoRecordingActivity.this, new asycTask_todo(){
                		
                		public void onPostExecute(String HOST_IP, String HOST_PORT) {
                        	camera_handler.stopPreview();
                        	camera_handler.setUnlock();
                        	mediaRecorder_initial();
                        	RTPthreadHandler.start(receiver, HOST_IP, HOST_PORT);
                        	isRecording = true;
                        	
                        	toggleButton_upload.setChecked(true);
                		}
                	});
                	
                }
                else
                {
                	if(isRecording == false)
                		return;
                	                	
                	toggleButton_upload.setChecked(true);
                	
                	
                	RTPshackHandHandler.actionOff( VideoRecordingActivity.this, new asycTask_todo(){
                		
                		public void onPostExecute() {
                        	RTPthreadHandler.stop();
                        	mediaRecorder_terminate();
                        	camera_handler.setLock();
                        	camera_handler.terminate();
                        	
                        	camera_handler.initial();
                        	camera_handler.startPreview();
                        	                        	
                        	isRecording = false;
                        	toggleButton_upload.setChecked(false);
                        	
                        	if(!surfaceView_state)
                        	{
                        		camera_handler.stopPreview();
                        		camera_handler.terminate();
                        	}
                        	System.gc();
                		}
                	});

                }
			}        	
        });        
        
        camera_handler = new cameraHandler(surfaceHolder);
        RTPthreadHandler =  new RTPthread();
        RTPshackHandHandler = new RTPshackHand();
        
        
        toggleButton_upload.setChecked(true);
        
        //toggleButton_upload.setChecked(false);
        
        
        
        
        
        
        mapView.setVisibility(View.INVISIBLE);
        
        
		findControl();
		
		
    }
    
    @Override
    public void onPause()
    {
    	super.onPause();
    }

	public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {

	}

	public void surfaceCreated(SurfaceHolder arg0) {

		camera_handler.initial();
		camera_handler.startPreview();	
		surfaceView_state = true;
	}

	public void surfaceDestroyed(SurfaceHolder arg0) {
    	if(isRecording)
    		toggleButton_upload.setChecked(false);
    	else
    	{
    		camera_handler.stopPreview();
    		camera_handler.terminate();
    	}
    	 surfaceView_state = false;
		

	}
	
	public void mediaRecorder_initial()
	{	
		receiver = new LocalSocket();  
		try {  
		    lss = new LocalServerSocket("MainRecorder");  
		    receiver.connect(new LocalSocketAddress("MainRecorder"));  
		    receiver.setReceiveBufferSize(500000);  
		    receiver.setSendBufferSize(500000);  
		    sender = lss.accept();  
		    sender.setReceiveBufferSize(500000);  
		    sender.setSendBufferSize(500000);  
		} catch (IOException e) {  
			e.printStackTrace();
		}
		
        mediaRecorder = new MediaRecorder();
        mediaRecorder.setCamera(camera_handler.getCamera());        
        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
       
        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        
        //mediaRecorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
        mediaRecorder.setVideoSize(128, 96);
        mediaRecorder.setVideoFrameRate( 5 );
        
        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H263);        
        
        mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        mediaRecorder.setOutputFile(sender.getFileDescriptor());       
       
        try {
            mediaRecorder.prepare();
            mediaRecorder.start();
        } catch (IOException e) {
        	e.printStackTrace();
        }
	}
	public void mediaRecorder_terminate()
	{
		
        mediaRecorder.release();
        mediaRecorder = null;
        
	    try {  
	        lss.close();  
	        receiver.close();  
	        sender.close();  
	    } catch (IOException e) {  
	        e.printStackTrace();  
	    }
	}
	
	
	
	private void findControl()
	{
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);
		
		mapController = mapView.getController();
		mapController.setZoom(16);
		
		//定位點
		List<Overlay> overlays = mapView.getOverlays();
		mylayer = new MyLocationOverlay(this, mapView);
		//顯示羅盤
		mylayer.enableCompass();
		//啟動更新(如果坐標有變動會跟著移動)
		mylayer.enableMyLocation();
		mylayer.runOnFirstFix(new Runnable()
		{

			public void run()
			{
				mapController.animateTo(mylayer.getMyLocation());
				
				
				
				
				double lat=mylayer.getMyLocation().getLatitudeE6()/1E6;
				double lon=mylayer.getMyLocation().getLongitudeE6()/1E6;
				address=getAddress(lon,lat);
				hasaddress=true;

				
				
				
			}
		});
		overlays.add(mylayer);
		
	}
	
	
	
	
	
	public String getAddress(Double lon,Double lat) {
		String returnAddress = "";
		try {
		    		Double longitude = lon;	//取得經度
		    		Double latitude = lat;	//取得緯度
 
		    		//建立Geocoder物件: Android 8 以上模疑器測式會失敗
		    		Geocoder gc = new Geocoder(this, Locale.TRADITIONAL_CHINESE); 	//地區:台灣
		    		//自經緯度取得地址
		    		List<Address> lstAddress = gc.getFromLocation(latitude, longitude, 1);
 
		    	//	if (!Geocoder.isPresent()){ //Since: API Level 9
		    	//		returnAddress = "Sorry! Geocoder service not Present.";
		    	//	}
		    		returnAddress = lstAddress.get(0).getAddressLine(0);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		return returnAddress;
	}
	
	
	
	
	
	
	private void direction(){
		_points.clear();
		_points=GetDirection();
		Polyline polyline = new Polyline(_points);  
        
        mapView.getOverlays().add(polyline); //map是MapView类型  
          
        mapView.invalidate();  
        mapView.setBuiltInZoomControls(true);  
          
//        MapController mapcontroller=mapView.getController();  
//        GeoPoint  point=new GeoPoint(39950181,116415059);  
//        mapcontroller.setCenter(point);
	}
	
	

	@Override
	protected boolean isRouteDisplayed()
	{
		// TODO Auto-generated method stub
		return false;
	}
	
	

	
	
	private List<GeoPoint> _points = new ArrayList<GeoPoint>();

	public List<GeoPoint> GetDirection()
	{
		
	    String mapAPI = "http://maps.google.com/maps/api/directions/json?origin={0}&destination={1}&language=zh-TW&sensor=true";
	    String url = MessageFormat.format(mapAPI, address, "台北車站");

	    HttpGet get = new HttpGet(url);
	    String strResult = "";
	    try
	    {

	        HttpParams httpParameters = new BasicHttpParams();
	        HttpConnectionParams.setConnectionTimeout(httpParameters, 3000);
	        HttpClient httpClient = new DefaultHttpClient(httpParameters);

	        HttpResponse httpResponse = null;
	        httpResponse = httpClient.execute(get);

	        if (httpResponse.getStatusLine().getStatusCode() == 200)
	        {
	            strResult = EntityUtils.toString(httpResponse.getEntity());

	            JSONObject jsonObject = new JSONObject(strResult);
	            JSONArray routeObject = jsonObject.getJSONArray("routes");
	            String polyline = routeObject.getJSONObject(0).getJSONObject("overview_polyline").getString("points");

	            if (polyline.length() > 0)
	            {
	                decodePolylines(polyline);
	            }

	        }
	    }
	    catch (Exception e)
	    {
	        Log.e("map", "MapRoute:" + e.toString());
	    }

	    return _points;
	}

	private void decodePolylines(String poly)
	{
	    int len = poly.length();
	    int index = 0;
	    int lat = 0;
	    int lng = 0;

	    while (index < len)
	    {
	        int b, shift = 0, result = 0;
	        do
	        {
	            b = poly.charAt(index++) - 63;
	            result |= (b & 0x1f) << shift;
	            shift += 5;
	        } while (b >= 0x20);
	        int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
	        lat += dlat;

	        shift = 0;
	        result = 0;
	        do
	        {
	            b = poly.charAt(index++) - 63;
	            result |= (b & 0x1f) << shift;
	            shift += 5;
	        } while (b >= 0x20);
	        int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
	        lng += dlng;

	        GeoPoint p = new GeoPoint((int) (((double) lat / 1E5) * 1E6), (int) (((double) lng / 1E5) * 1E6));
	        _points.add(p);

	    }
	    
	    
	}






}