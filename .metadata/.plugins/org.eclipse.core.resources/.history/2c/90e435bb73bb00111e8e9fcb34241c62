package com.MrTaxi.Driver;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import com.MrTaxi.core.Polyline;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.MyLocationOverlay;
import com.google.android.maps.Overlay;


import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;

public class tab1_Activity extends MapActivity
{
	private MapView mapView;
	private MapController mapController;
	private MyLocationOverlay mylayer;
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.tab1);
		findControl();
		direction();
	}

	private void findControl()
	{
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);
		
		mapController = mapView.getController();
		mapController.setZoom(16);
		
		//定位點
		List<Overlay> overlays = mapView.getOverlays();
		mylayer = new MyLocationOverlay(this, mapView);
		//顯示羅盤
		mylayer.enableCompass();
		//啟動更新(如果坐標有變動會跟著移動)
		mylayer.enableMyLocation();
		mylayer.runOnFirstFix(new Runnable()
		{

			public void run()
			{
				mapController.animateTo(mylayer.getMyLocation());
			}
		});
		overlays.add(mylayer);
		
	}
	
	private void direction(){
		_points=GetDirection();
		Polyline polyline = new Polyline(_points);  
        
        mapView.getOverlays().add(polyline); //map是MapView类型  
          
        mapView.invalidate();  
        mapView.setBuiltInZoomControls(true);  
          
        MapController mapcontroller=mapView.getController();  
//        GeoPoint  point=new GeoPoint(39950181,116415059);  
//        mapcontroller.setCenter(point);
	}
	
	

	@Override
	protected boolean isRouteDisplayed()
	{
		// TODO Auto-generated method stub
		return false;
	}
	
	
	
	
	private List<GeoPoint> _points = new ArrayList<GeoPoint>();

	public List<GeoPoint> GetDirection()
	{
		


		

        Geocoder gc = new Geocoder(this, Locale.getDefault());  
          
        /* 取出地理坐標經緯度 */  
        GeoPoint gp=mylayer.getMyLocation();
        double geoLatitude = (int)gp.getLatitudeE6()/1E6;  
        double geoLongitude = (int)gp.getLongitudeE6()/1E6;  
          
        /* 自經緯度取得地址（可能有多行地址） */  
        List<Address> lstAddress = null;
		try {
			lstAddress = gc.getFromLocation(geoLatitude, geoLongitude, 1);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}  
          
        StringBuilder sb = new StringBuilder();  
          
        /* 判斷地址是否为多行 */  
        if (lstAddress.size() > 0)  
        {  
          Address adsLocation = lstAddress.get(0);  
  
          for(int i=0;i<adsLocation.getMaxAddressLineIndex();i++)  
          {  
            sb.append(adsLocation.getAddressLine(i)).append("\n");  
          }  
          sb.append(adsLocation.getLocality()).append("\n");  
          sb.append(adsLocation.getPostalCode()).append("\n");  
          sb.append(adsLocation.getCountryName());  
        }  
		
		
		
		
		
		
		
		
		
		
		
		
	    String mapAPI = "http://maps.google.com/maps/api/directions/json?origin={0}&destination={1}&language=zh-TW&sensor=true";
	    String url = MessageFormat.format(mapAPI, lstAddress, "萬芳醫院");

	    HttpGet get = new HttpGet(url);
	    String strResult = "";
	    try
	    {

	        HttpParams httpParameters = new BasicHttpParams();
	        HttpConnectionParams.setConnectionTimeout(httpParameters, 3000);
	        HttpClient httpClient = new DefaultHttpClient(httpParameters);

	        HttpResponse httpResponse = null;
	        httpResponse = httpClient.execute(get);

	        if (httpResponse.getStatusLine().getStatusCode() == 200)
	        {
	            strResult = EntityUtils.toString(httpResponse.getEntity());

	            JSONObject jsonObject = new JSONObject(strResult);
	            JSONArray routeObject = jsonObject.getJSONArray("routes");
	            String polyline = routeObject.getJSONObject(0).getJSONObject("overview_polyline").getString("points");

	            if (polyline.length() > 0)
	            {
	                decodePolylines(polyline);
	            }

	        }
	    }
	    catch (Exception e)
	    {
	        Log.e("map", "MapRoute:" + e.toString());
	    }

	    return _points;
	}

	private void decodePolylines(String poly)
	{
	    int len = poly.length();
	    int index = 0;
	    int lat = 0;
	    int lng = 0;

	    while (index < len)
	    {
	        int b, shift = 0, result = 0;
	        do
	        {
	            b = poly.charAt(index++) - 63;
	            result |= (b & 0x1f) << shift;
	            shift += 5;
	        } while (b >= 0x20);
	        int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
	        lat += dlat;

	        shift = 0;
	        result = 0;
	        do
	        {
	            b = poly.charAt(index++) - 63;
	            result |= (b & 0x1f) << shift;
	            shift += 5;
	        } while (b >= 0x20);
	        int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
	        lng += dlng;

	        GeoPoint p = new GeoPoint((int) (((double) lat / 1E5) * 1E6), (int) (((double) lng / 1E5) * 1E6));
	        _points.add(p);

	    }
	    
	    
	}
}